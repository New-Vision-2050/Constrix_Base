// app/layout.tsx
import type { Metadata } from "next";
import "./globals.css";
import localFont from "next/font/local";
import ReactQueryProvider from "@/providers/react-query";
import { getMessages } from "next-intl/server";
import { routing } from "@/i18n/routing";
import { NextIntlClientProvider } from "next-intl";
import { notFound } from "next/navigation";
import { Toaster } from "@/modules/table/components/ui/toaster";
import { ThemeProvider } from "@/providers/theme-provider";
import { cookies } from "next/headers";
import { cn } from "@/lib/utils";

const theSans = localFont({
  src: [
    {
      path: "../fonts/TheSans-Plain.otf",
      weight: "500",
      style: "normal",
    },
    {
      path: "../fonts/TheSans-Bold.otf",
      weight: "700",
      style: "normal",
    },
  ],
  variable: "--font-theSans",
  display: "swap",
});

const getCompanyDataFromCookies = async () => {
  const cookieStore = await cookies();
  const companyCookie = cookieStore.get("company-data")?.value;
  return companyCookie ? JSON.parse(companyCookie) : null;
};

export async function generateMetadata(): Promise<Metadata> {
  const companyData = await getCompanyDataFromCookies();
  const companyName = companyData?.name || "Constrix";
  return {
    title: companyName,
    description: "Generated by Constrix",
    icons: companyData?.logo
      ? {
          icon: companyData.logo,
          apple: companyData.logo,
        }
      : undefined,
  };
}

export default async function RootLayout({
  children,
  params,
}: {
  children: React.ReactNode;
  params: Promise<{ locale: string }>;
}) {
  const { locale } = await params;

  if (!routing.locales.includes(locale as "ar" | "en")) {
    return notFound();
  }
  const messages = await getMessages();
  
  return (
    <html
      lang={locale}
      dir={locale === "ar" ? "rtl" : "ltr"}
      suppressHydrationWarning
    >
      <body className={cn(theSans.variable, "!pointer-events-auto")}>
        <ThemeProvider
          attribute="class"
          defaultTheme="dark"
          enableSystem
          disableTransitionOnChange
        >
            <NextIntlClientProvider messages={messages}>
              <main>
                <ReactQueryProvider>{children}</ReactQueryProvider>
              </main>
              <Toaster />
            </NextIntlClientProvider>
        </ThemeProvider>
      </body>
    </html>
  );
}
